import base64
import os
import re
from pathlib import Path

import requests
import structlog
from PIL import Image
from io import BytesIO
import openai
from django.conf import settings

from core.global_func import Timer

logger = structlog.get_logger('deposit')


def encode_image(image_path):
    with Image.open(image_path) as img:
        if img.mode in ("RGBA", "LA"):
            background = Image.new("RGB", img.size, (255, 255, 255))
            background.paste(img, mask=img.split()[-1])  # –ê–ª—å—Ñ–∞ –∫–∞–∫ –º–∞—Å–∫–∞
            img = background
        elif img.mode != "RGB":
            img = img.convert("RGB")
        buffered = BytesIO()
        img.save(buffered, format="JPEG")
        return base64.b64encode(buffered.getvalue()).decode("utf-8")


def extract_json(text):
    # –£–±–∏—Ä–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –≤–∏–¥–∞ ```json ... ```
    text = re.sub(r"^```json\s*", "", text.strip(), flags=re.IGNORECASE)
    text = re.sub(r"^```", "", text.strip())
    text = re.sub(r"```$", "", text.strip())
    return text.strip()


def gpt_recognize_check(image_path):
    client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
    base64_image = encode_image(image_path)
    response = client.chat.completions.create(
        model="gpt-4o",
        temperature=0,
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    },
                    {
                        "type": "text",
                        "text": (
                            "–≠—Ç–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —á–µ–∫, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞. "
                            "–†–∞—Å–ø–æ–∑–Ω–∞–π –µ–≥–æ –∏ –≤—ã–≤–µ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ json c –∫–ª—é—á–∞–º–∏:\n"
                            "–°—É–º–º–∞: amount\n"
                            "–°—Ç–∞—Ç—É—Å: status (1 –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, -1 –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ—à–Ω–∞. 0 –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ\n"
                            "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: create_at\n"
                            "–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: sender\n"
                            "–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: bank\n"
                            "–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: recepient\n"
                            "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: owner_name\n"
                            "–ï—Å–ª–∏ –Ω–∞ —á–µ–∫–µ –µ—Å—Ç—å –ø–µ—á–∞—Ç—å –±–∞–Ω–∫–∞ ‚Äî —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. "
                            "–ù–∞ —á–µ–∫–∞—Ö Unibank, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π, —ç—Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å."
                            "–ï—Å–ª–∏ —á–µ–∫ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ—É—Å–ø–µ—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—Å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Ç–∫–∞–∑–µ), —Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π"
                            "–ù–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—Å—è —á–∏—Å—Ç—ã–π JSON –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: —Å–∏–º–≤–æ–ª–æ–≤ json –≤ —Ä–µ–∑—É–¥—å—Ç–∞—Ç–µ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. amount –±—Ä–∞—Ç—å –º–æ–¥—É–ª—å —á–∏—Å–ª–∞"
                        )
                    }
                ]
            }
        ],
        max_tokens=1000
    )
    usage = response.usage
    input_tokens = usage.prompt_tokens
    output_tokens = usage.completion_tokens
    total_tokens = usage.total_tokens
    cost_usd = total_tokens * 0.000005

    logger.info(f"üìÑ {image_path.name}")
    print(response.choices[0].message.content)
    print(f"üî¢ –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {input_tokens}")
    print(f"üî¢ –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {output_tokens}")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~ ${cost_usd:.5f}")
    return response.choices[0].message.content


def send_image_to_gpt(image_field, server_url="http://45.14.247.139:9000/recognize/"):  # –†–µ–∑–µ—Ä–≤ Payment
    with image_field.open('rb') as f:
        files = {'file': (image_field.name, f, 'image/jpeg')}
        with Timer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."):
            response = requests.post(server_url, files=files, timeout=10)
    result = response.json().get('result')
    return result
