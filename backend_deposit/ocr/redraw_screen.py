import asyncio
from io import BytesIO
from pathlib import Path
import cv2
import numpy as np
import pytesseract
import django
import os
from sys import platform

os.environ.setdefault("DJANGO_SETTINGS_MODULE", 'backend_deposit.settings')
django.setup()

def blur_sender_on_screen(img_source: Path | bytes):
    if platform == 'win32':
        tespatch = Path(
        'C:/') / 'Users' / 'mania' / 'AppData' / 'Local' / 'Programs' / 'Tesseract-OCR' / 'tesseract.exe'
        pytesseract.pytesseract.tesseract_cmd = tespatch.as_posix()
    if isinstance(img_source, Path):
        img_array = np.fromfile(img_source, dtype=np.uint8)
        orig_img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
    else:
        orig_img = cv2.imdecode(np.frombuffer(img_source, dtype=np.uint8), cv2.IMREAD_COLOR)

    if orig_img is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray = cv2.cvtColor(orig_img, cv2.COLOR_BGR2GRAY)

    # ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    gray = clahe.apply(gray)

    # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–µ–≥—É–ª–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 150)
    threshold = 150
    _, binary = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY)

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
    custom_config = r'--psm 11 --oem 3'  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    data = pytesseract.image_to_data(binary, config=custom_config, output_type=pytesseract.Output.DICT)
    print(data)
    # ‚úÖ –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ "Sender" –∏ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    for i, text in enumerate(data['text']):
        if "Sender" in text:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "Sender")
                x, y, w, h = data['left'][i + 1], data['top'][i + 1], data['width'][i + 1], data['height'][i + 1]

                # ‚úÖ –†–∞–∑–º—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                roi = orig_img[y:y + h, x:x + w]
                blurred = cv2.GaussianBlur(roi, (15, 15), 10)  # –£–≤–µ–ª–∏—á—å—Ç–µ —è–¥—Ä–æ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è
                orig_img[y:y + h, x:x + w] = blurred

                print(f"üî≥ –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {x}, {y}, {w}, {h}")

            except IndexError:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ 'Sender'.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∏–Ω–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑ –≤ BytesIO
    success, encoded_image = cv2.imencode(".png", orig_img)
    if not success:
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    output_path = Path('blured.jpg')
    image_bytes_io = BytesIO(encoded_image.tobytes())
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑ np.array
    # cv2.imwrite(output_path.as_posix(), orig_img)
    # print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    # with open('res.jpg', 'wb') as f:
    #     f.write(image_bytes_io.read())

    return image_bytes_io


# source = Path("695597294_from_S_555417885.jpg")
# mask_sender_on_screen(source)

async def main():
    tesseract_path = Path(
        'C:/') / 'Users' / 'mania' / 'AppData' / 'Local' / 'Programs' / 'Tesseract-OCR' / 'tesseract.exe'
    pytesseract.pytesseract.tesseract_cmd = tesseract_path.as_posix()

    # ‚úÖ –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —á–µ–∫–∞–º–∏
    input_folder = Path("checks")

    # ‚úÖ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
    output_folder = input_folder / "masked"
    output_folder.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ checks
    image_files = list(input_folder.glob("*.jpg"))  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ("*.png") –∏–ª–∏ ("*.*") –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} —á–µ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    # ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for image_path in image_files:
        # ‚úÖ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        print(image_path)

        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(str(image_path))

        # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        gray = clahe.apply(gray)

        # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–µ–≥—É–ª–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 150)
        threshold = 150
        _, binary = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY)

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
        custom_config = r'--psm 11 --oem 3'  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        data = pytesseract.image_to_data(binary, config=custom_config, output_type=pytesseract.Output.DICT)

        # ‚úÖ –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ "Sender" –∏ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        for i, text in enumerate(data['text']):
            if "Sender" in text:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "Sender")
                    x, y, w, h = data['left'][i + 1], data['top'][i + 1], data['width'][i + 1], data['height'][i + 1]

                    # ‚úÖ –†–∞–∑–º—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                    roi = image[y:y + h, x:x + w]
                    blurred = cv2.GaussianBlur(roi, (15, 15), 10)  # –£–≤–µ–ª–∏—á—å—Ç–µ —è–¥—Ä–æ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è
                    image[y:y + h, x:x + w] = blurred

                    print(f"üî≥ –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {x}, {y}, {w}, {h}")

                except IndexError:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ 'Sender'.")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = output_folder / image_path.name
        cv2.imwrite(output_path.as_posix(), image)

        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")


if __name__ == '__main__':
    # asyncio.run(main())
    pass
