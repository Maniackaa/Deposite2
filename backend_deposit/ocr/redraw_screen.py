import asyncio
import re
from pathlib import Path

import cv2
import pytesseract
import django
import os


os.environ.setdefault("DJANGO_SETTINGS_MODULE", 'backend_deposit.settings')
django.setup()


async def main():
    tesseract_path = Path('C:/Users/mania/AppData/Local/Programs/Tesseract-OCR/tesseract.exe')
    pytesseract.pytesseract.tesseract_cmd = tesseract_path.as_posix()

    # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —á–µ–∫–∞–º–∏ –∏ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    input_folder = Path("checks")
    output_folder = input_folder / "masked"
    output_folder.mkdir(exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = list(input_folder.glob("*.jpg"))
    print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–ª—è Transaction ID –º—ã –æ–∂–∏–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    keys = ['Status', 'Date', 'Sender', 'wallet', 'Recipient', 'Transaction ID', 'Commission']

    results = {}

    for image_path in image_files:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {image_path.name}")
        image = cv2.imread(str(image_path))
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        gray = clahe.apply(gray)

        _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ OCR –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        # char_whitelist = '+- :;*0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz,.‚Ä¢‚Çº'
        # config = f'--psm 6 --oem 1 -c tessedit_char_whitelist="{char_whitelist}"'
        config = f'--psm 6 --oem 1'
        data = pytesseract.image_to_string(binary, lang='eng', config=config)
        print(data)
        data = pytesseract.image_to_data(binary, lang='eng', config=config, output_type=pytesseract.Output.DICT)
        print(data)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (top, left, —Ç–µ–∫—Å—Ç)
        tokens = []
        n = len(data['text'])
        for i in range(n):
            token = data['text'][i].strip()
            if token:
                top = data['top'][i]
                left = data['left'][i]
                tokens.append((top, left, token))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ (top, left)
        tokens.sort(key=lambda x: (x[0], x[1]))

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º ‚Äì –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ top –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç tolerance
        tolerance = 10
        lines = []
        if tokens:
            current_line = [tokens[0]]
            current_top = tokens[0][0]
            for (top, left, token) in tokens[1:]:
                if top - current_top <= tolerance:
                    current_line.append((left, token))
                    current_top = top  # –æ–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π
                else:
                    current_line.sort(key=lambda x: x[0])
                    lines.append(current_line)
                    current_line = [(left, token)]
                    current_top = top
            if current_line:
                current_line.sort(key=lambda x: x[0])
                lines.append(current_line)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        extracted_data = {}
        for line in lines:
            i = 0
            while i < len(line):
                token = line[i][1]
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–∞–≤–µ–Ω "Transaction", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á "Transaction ID"
                if token == "Transaction":
                    key_word = "Transaction ID"
                    i += 1
                    collected = []
                    while i < len(line) and line[i][1] not in keys:
                        collected.append(line[i][1])
                        i += 1
                    # –°—Ä–µ–¥–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—â–µ–º —á–∏—Å–ª–æ–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥–ª–∏–Ω–æ–π >= 5 —Å–∏–º–≤–æ–ª–æ–≤
                    value = ""
                    for part in collected:
                        part_clean = part.replace(',', '.')
                        try:
                            num = float(part_clean)
                            if len(part_clean) >= 5:
                                value = part_clean
                                break
                        except ValueError:
                            continue
                    extracted_data[key_word] = value
                    continue

                if token in keys:
                    key_word = token
                    i += 1
                    collected = []
                    while i < len(line) and line[i][1] not in keys:
                        collected.append(line[i][1])
                        i += 1
                    value = " ".join(collected).strip()
                    # –î–ª—è Commission –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if key_word == "Commission":
                        parts = value.split()
                        num = ""
                        for part in parts:
                            try:
                                float(part.replace(',', '.'))
                                num = part
                                break
                            except ValueError:
                                continue
                        value = num
                    extracted_data[key_word] = value
                else:
                    i += 1

        # === –û–ë–†–ê–ë–û–¢–ö–ê Recipient ===
        recipient_value = ""
        for i in range(len(data['text'])):
            token = data['text'][i].strip()
            if token == "Recipient":
                x = data['left'][i]
                y = data['top'][i]
                w = data['width'][i]
                h = data['height'][i]

                # –ù–∞—á–∏–Ω–∞–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç "Recipient", –ø–æ –≤—ã—Å–æ—Ç–µ —á—É—Ç—å —à–∏—Ä–µ, –ø–æ —à–∏—Ä–∏–Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
                roi_x1 = x + w + 5
                roi_y1 = y - 10
                roi_y2 = y + h + 10
                roi_x2 = binary.shape[1]  # –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —à–∏—Ä–∏–Ω–µ

                # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                roi_x1 = max(0, roi_x1)
                roi_y1 = max(0, roi_y1)
                roi_y2 = min(binary.shape[0], roi_y2)

                roi = binary[roi_y1:roi_y2, roi_x1:roi_x2]

                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ROI: –º–∞—Å—à—Ç–∞–±, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –∏–Ω–≤–µ—Ä—Å–∏—è
                roi_resized = cv2.resize(roi, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
                clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
                roi_contrast = clahe.apply(roi_resized)
                _, roi_thresh = cv2.threshold(roi_contrast, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                roi_inverted = cv2.bitwise_not(roi_thresh)

                # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                config = '--psm 7 --oem 1'
                recipient_value = pytesseract.image_to_string(roi_inverted, lang='eng', config=config).strip()

                def clean_recipient_text(text):
                    text = text.strip()
                    if text.startswith('+994'):
                        return re.sub(r'\s+', ' ', text)
                    cleaned = re.sub(r'[+=\-]', '', text)
                    parts = cleaned.split()

                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É: –ø–µ—Ä–≤—ã–µ 2 –±–ª–æ–∫–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
                    if len(parts) >= 3:
                        return f"{parts[0]} {parts[1]}‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {parts[-1]}"
                    elif len(parts) == 2:
                        return f"{parts[0]} ‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {parts[1]}"
                    elif len(parts) == 1 and len(parts[0]) >= 4:
                        return f"{parts[0][:4]} ‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {parts[0][-4:]}"
                    else:
                        return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢'  # –µ—Å–ª–∏ –≤—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å–∫—É

                cleaned = clean_recipient_text(recipient_value)
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                print(f"üì¶ Recipient (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º): {cleaned}")

                extracted_data['Recipient'] = cleaned


        # === –î–û–ë–ê–í–õ–Ø–ï–ú –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –°–£–ú–ú–´ (AMOUNT) ===
        amount = ""
        potential_amounts = []

        for i in range(len(data['text'])):

            token = data['text'][i].strip().replace('‚Çº', '').replace('m', '')
            if re.fullmatch(r'-?\d+\.\d{2}', token):  # –Ω–∞–ø—Ä–∏–º–µ—Ä -1.00, 11.00
                x, y, w, h = data['left'][i], data['top'][i], data['width'][i], data['height'][i]
                center_x = x + w // 2
                center_y = y + h // 2
                potential_amounts.append({
                    'text': token,
                    'center_x': center_x,
                    'center_y': center_y,
                    'area': w * h
                })

        if potential_amounts:
            # üí° –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—â–∞–¥–∏ –∏–ª–∏ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            img_h, img_w = binary.shape[:2]
            center_screen = (img_w // 2, img_h // 2)

            def score(p):
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞ + –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –∫—Ä—É–ø–Ω–µ–µ)
                dx = abs(p['center_x'] - center_screen[0])
                dy = abs(p['center_y'] - center_screen[1])
                return dx + dy - p['area'] * 0.01

            best_match = sorted(potential_amounts, key=score)[0]
            amount = best_match['text']
            print(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ (amount): {amount}")
        else:
            print("‚ùå –°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —à–∞–±–ª–æ–Ω—É.")

        extracted_data['Amount'] = amount
        wallet = extracted_data.get('wallet')
        if wallet:
            extracted_data['wallet'] = wallet.replace(' ', '')

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for k in keys:
            print(f"–ö–ª—é—á: '{k}', —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ: '{extracted_data.get(k, '')}'")
        results[image_path.name] = extracted_data
        print(data)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = output_folder / image_path.name
        # cv2.imwrite(output_path.as_posix(), image)
        cv2.imwrite(output_path.as_posix(), binary)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")

    print("\n–°–æ–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for filename, res in results.items():
        print(f"{filename}: {res}")


if __name__ == '__main__':
    asyncio.run(main())